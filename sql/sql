sql - structured query language

select table 为sql关键字
table_name 指表名
columns 指表中一列或多列

1. 基础的增删查改(select insert update delete distinct limit order by)

mysql> select * from Websites;
+----+--------------+---------------------------+-------+---------+
| id | name         | url                       | alexa | country |
+----+--------------+---------------------------+-------+---------+
| 1  | Google       | https://www.google.cm/    | 1     | USA     |
| 2  | 淘宝         | https://www.taobao.com/   | 13    | CN      |
| 3  | 菜鸟教程     | http://www.runoob.com/    | 4689  | CN      |
| 4  | 微博         | http://weibo.com/         | 20    | CN      |
| 5  | Facebook     | https://www.facebook.com/ | 3     | USA     |
+----+--------------+---------------------------+-------+---------+

    select distinct columns
    from table_name
    where conditions
    limit number
    order by columns asc|desc

        select distinct name, country, alexa
        from Websites
        where country='CN' and alexa > 10
        limit 10
        order by alexa, country desc;

    insert into table_name(columns)
    values(value1, value2, value3, ...);

        insert into Websites(name, url, alexa, country)
        values('Google', 'www.google.com', '1', 'USA');

    update table_name
    set column_name_1=value1, column_name_2=value2, ...
    where conditions

        update Websites
        set alexa='5000', country='CN'
        where name='菜鸟教程';

    delete from table_name
    where conditions

        delete from Websites
        where name='Baidu' and country='CN';

    delete all rows without table;
        delete from table_name;
        delete * from table_name;

    drop, truncate, delete        
        drop table_name;        delete data(all rows) and table
        truncate table_name;    delete data without table
        delete from table_name where conditions;    delete specify data

    ***update and delete must has conditions!***

2. conditions(wildcard like wildcard in between)

    conditions
        column_name operator value;
            operators
                = <>(!=) > < >= <= between like in
            value
                text: country = 'CN' or country = "CN"
                number: id = 1
        and or
            condition_1 and|or condition_2

    %: 0个或多个字符
    _(下划线): 一个字符
    [charlist]: 字符序列中任一字符
    [^charlist] [!charlist]: 不在字符序列中任一字符 

    select * from Websites
    where name like 'G%';

    select * from Websites
    where name like '%k';
    
    select * from Websites
    where name like '%oo%';
    
    select * from Websites
    where name not like '%oo%';

    select * from Websites
    where name in ('Google', 'Baidu');

    select * from Websites
    where alexa between 1 and 20;

    select * from Websites
    where alexa not between 1 and 20;
    
    select * from Websites
    where alexa between 'A' and 'H';

    select * from Websites
    where date between '2016-05-10' and '2016-05-14';

3. alias(别名) - 增加可读性和缩短sql语句
    select name as n, country as c 
    from Websites;

    select name, concat(url, ', ', alexa, ', ', country) as site_info 
    from Websites;

    select w.name a.count
    from Websites as w, access_log as a
    where a.site_id=w.id and w.name='Google';

4. join(inner join), left join, right join, full join
    join: 返回两表都匹配的值(例如两表都有id为1才返回. 若只有一表有id为1的行, 另一表没有id为1的值, 则这行不会返回.)
    left join: 以左表为基准，若右表没有匹配的值，只返回左表内容，其余字段为NULL。
    righ join: 以右表为基准，若左表没有匹配的值，只返回右表内容，其余字段为NULL。
    full join: left join and right join

    首先，连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。
    左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。
    外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配。假设两个没有空值的表进行左连接，左表是基准表，左表的所有行都出现在结果中，右表则可能因为无法与基准表匹配而出现是空值的字段
    
    select Websites.id, Websites.name, access_log.count, access_log.date
    from Websites
    (inner) join access_log
    on Websites.id=access_log.site_id

    select Websites.id, Websites.name, access_log.count, access_log.date
    from Websites
    left (outer) join access_log
    on Websites.id=access_log.site_id

    select Websites.id, Websites.name, access_log.count, access_log.date
    from Websites
    right (outer) join access_log
    on Websites.id=access_log.site_id

    select Websites.id, Websites.name, access_log.count, access_log.date
    from Websites
    full outer join access_log
    on Websites.id=access_log.site_id

    inner join <= min(left join, right join)
    full join >= max(left join, right join)
    when inner join < min(left join, right join), full join > max(left join, right join)
    
5. union
    select country from Websites
    union (all)
    select country from apps
    order by country

6. insert into select

    create table table_name_1 select * from table_name_2

    insert into table1
    select * from table2

    insert into table1(columns)
    select columns
    from table2

    insert into Websites(name, country)
    select app_name, country
    from apps;

7. create alter add drop constraints(约束)
    create database dbname;
    create database my_db;

    create table table_name (
        column_name_1 datatype(size),
        column_name_2 datatype(size),
        column_name_3 datatype(size),
        ...
    );

    create table Persons (
        id int,
        last_name varchar(255),
        first_name varchar(255),
        address varchar(255),
        city varchar(255)
    );

    constraints
       not null
       unique
       primary key
       foreign key
       check
       default

    create table table_name (
        column_name_1 datatype(size) constraint_name,
        column_name_2 datatype(size) constraint_name,
        column_name_3 datatype(size) constraint_name,
        ...
    );

    create table Persons (
        id int not null,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255),
        primary key (id),
        unique (id)
    );

    create table Persons (
        id int not null primary key unique,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255)
    );

    create table Persons (
        id int not null,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255),
        constraint pk_id primary key (id, last_name),
        constraint uq_id unique (id, last_name)
    );

    alter table Persons
    add unique (id);

    alter table Persons
    add constraint uq_id unique (id, last_name);
    
    alter table Persons
    drop index uq_id;
    
    alter table Persons
    add primary key (id);

    alter table Persons
    add constraint uq_id primary key (id, last_name);

    alter table Persons
    drop primary key

    create table Orders(
       id int not null,
       no int not null,
       p_id int,
       primary key (id),
       foreign key (p_id) references Persons(id)
    )

    create table Orders(
       id int not null,
       no int not null,
       p_id int,
       primary key (id),
       constraint fk_op foreign key (p_id) references Persons(id)
    )

    alter table Orders
    add foreign key (p_id)
    references Persons(id)

    alter table Orders
    add constraint fk_op foreign key (p_id) references Persons(id)

    alter table Orders
    drop foreign key fk_op
    
    create table Persons (
        id int not null check (id > 0),
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255)
    );

    create table Persons (
        id int not null,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255),
        check (id > 0),
        constraint chk_person check (id > 0 and address='iscas')
    );

    alter table Persons
    add check (id > 0);

    alter table Persons
    add constraint chk_person check (id > 0 and address='iscas')

    alter table Persons
    drop constraint chk_person

    create table Persons (
        id int not null,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255) default 'iscas',
        date d default getdate()
    );
    
    alter table Persons
    alter address set default 'iscas'

    alter table Persons
    alter address drop default

    drop table table_name

    drop database database_name

    truncate table table_name

    alter table table_name
    add column_name data_type

    alter table table_name
    drop column column_name

    alter table table_name
    modify column column_name data_type

8. auto increment
    create table Persons (
        id int not null primary key auto_increment,
        last_name varchar(255) not null,
        first_name varchar(255),
        address varchar(255)
    );

    alter table Persons auto_increment=100;
    
    alter table student change id id int(11) not null auto_increment;

9. index view
    create index index_name 
    on table_name (columns)

    create index PIndex
    on Persons (last_name, first_name)

    alter table table_name drop index index_name

    create view view_name as
    select columns
    from table_name
    where conditions

    create view [Current Product List] as
    select p_id, p_name
    from Products
    where discontinued=no

    select * from [Current Product List]

    Northwind 样本数据库的另一个视图会选取 "Products" 表中所有单位价格高于平均单位价格的产品：
    CREATE VIEW [Products Above Average Price] AS
    SELECT ProductName,UnitPrice
    FROM Products
    WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM Products)

    Northwind 样本数据库的另一个视图会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 "Product Sales for 1997" 的视图那里选取数据：
    CREATE VIEW [Category Sales For 1997] AS
    SELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales
    FROM [Product Sales for 1997]
    GROUP BY CategoryName

    drop view view_name

10. date
    now() curdate() curtime() date() extract() date_add() date_sub() datediff() date_format()
    
    DATE - 格式：YYYY-MM-DD
    DATETIME - 格式：YYYY-MM-DD HH:MM:SS
    TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS
    YEAR - 格式：YYYY 或 YY

11. null
    
    is null, is not null

    SELECT LastName,FirstName,Address FROM Persons
    WHERE Address IS NULL

    SELECT LastName,FirstName,Address FROM Persons
    WHERE Address IS NOT NULL

    SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0))
    FROM Products

    SELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0))
    FROM Products

12. date type
    Text
        CHAR(size)  保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。
        VARCHAR(size)   保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。
        TINYTEXT    存放最大长度为 255 个字符的字符串。
        TEXT    存放最大长度为 65,535 个字符的字符串。
        BLOB    用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。
        MEDIUMTEXT  存放最大长度为 16,777,215 个字符的字符串。
        MEDIUMBLOB  用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。
        LONGTEXT    存放最大长度为 4,294,967,295 个字符的字符串。
        LONGBLOB    用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。
        ENUM(x,y,z,etc.)    允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。
        注释：这些值是按照您输入的顺序排序的。

        可以按照此格式输入可能的值： ENUM('X','Y','Z')

        SET 与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。

    Number
        NT(size)    带符号-128到127 ，无符号0到255。
        SMALLINT(size)  带符号范围-32768到32767，无符号0到65535, size 默认为 6。
        MEDIUMINT(size) 带符号范围-8388608到8388607，无符号的范围是0到16777215。 size 默认为9
        INT(size)   带符号范围-2147483648到2147483647，无符号的范围是0到4294967295。 size 默认为 11
        BIGINT(size)    带符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。size 默认为 20
        FLOAT(size,d)   带有浮动小数点的小数字。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。
        DOUBLE(size,d)  带有浮动小数点的大数字。在 size 参数中规显示定最大位数。在 d 参数中规定小数点右侧的最大位数。
        DECIMAL(size,d) 作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。
        注意：以上的 size 代表的并不是存储在数据库中的具体的长度，如 int(4) 并不是只能存储4个长度的数字。

        实际上int(size)所占多少存储空间并无任何关系。int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。就是在显示给用户的方式有点不同外，int(M) 跟 int 数据类型是相同的。

        例如：

        1、int的值为10 （指定zerofill）

        int（9）显示结果为000000010
        int（3）显示结果为010
        就是显示的长度不一样而已 都是占用四个字节的空间
    
    Date
        DATE()  日期。格式：YYYY-MM-DD
        注释：支持的范围是从 '1000-01-01' 到 '9999-12-31'

        DATETIME()  *日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS
        注释：支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'

        TIMESTAMP() *时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS
        注释：支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC

        TIME()  时间。格式：HH:MM:SS
        注释：支持的范围是从 '-838:59:59' 到 '838:59:59'

        YEAR()  2 位或 4 位格式的年。
        注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。

        *即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。
